[14.481696, "o", "\b\b\u001b[4m\u001b[32m.\u001b[4m\u001b[32m/\u001b[24m\u001b[39m"]
[15.019399, "i", ""]
[15.021153, "o", "\b\b\u001b[4m\u001b[32m.\u001b[24m\u001b[39m\u001b[24m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[14D"]
[15.022968, "o", "\b\u001b[24m\u001b[32m.\u001b[39m"]
[15.023223, "o", "\b\u001b[32m.\u001b[39m\u001b[92m/main | grep 1\u001b[39m\u001b[14D"]
[15.179131, "i", ""]
[15.179925, "o", "\b\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[15D"]
[15.327865, "i", ""]
[15.80269, "i", "c"]
[15.804294, "o", "c"]
[15.80791, "o", "\b\u001b[1m\u001b[31mc\u001b[0m\u001b[39m"]
[15.808189, "o", "\b\u001b[1m\u001b[31mc\u001b[0m\u001b[39m\u001b[92md gtest\u001b[39m\b\b\b\b\b\b\b"]
[15.96234, "i", "a"]
[15.964367, "o", "\b\u001b[1m\u001b[31mc\u001b[1m\u001b[31ma\u001b[0m\u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \b\b\b\b\b\b"]
[15.969097, "o", "\u001b[92mt lab4.c\u001b[39m\u001b[8D"]
[16.035758, "i", "t"]
[16.036772, "o", "\b\b\u001b[1m\u001b[31mc\u001b[1m\u001b[31ma\u001b[1m\u001b[31mt\u001b[0m\u001b[39m"]
[16.038974, "o", "\b\b\b\u001b[0m\u001b[32mc\u001b[0m\u001b[32ma\u001b[0m\u001b[32mt\u001b[39m"]
[16.123922, "i", " "]
[16.125365, "o", "\b\u001b[32mt\u001b[32m \u001b[39m"]
[16.127531, "o", "\b\b\u001b[32mt\u001b[39m\u001b[39m "]
[16.25052, "i", "s"]
[16.252881, "o", "\u001b[39ms\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \b\b\b\b\b"]
[16.257483, "o", "\b\u001b[4ms\u001b[24m"]
[16.279091, "o", "\u001b[92mhell_test.cpp\u001b[39m\u001b[13D"]
[16.39028, "i", "h"]
[16.391205, "o", "\b\u001b[4ms\u001b[39m\u001b[4mh\u001b[24m"]
[16.453903, "i", "e"]
[16.454808, "o", "\b\u001b[4mh\u001b[39m\u001b[4me\u001b[24m"]
[16.585015, "i", "l"]
[16.585944, "o", "\b\u001b[4me\u001b[39m\u001b[4ml\u001b[24m"]
[16.730965, "i", "l"]
[16.732054, "o", "\b\u001b[4ml\u001b[39m\u001b[4ml\u001b[24m"]
[16.933243, "i", "_"]
[16.934357, "o", "\b\u001b[4ml\u001b[39m\u001b[4m_\u001b[24m"]
[17.1295, "i", "t"]
[17.131236, "o", "\b\u001b[4m_\u001b[39m\u001b[4mt\u001b[24m"]
[17.201134, "i", "e"]
[17.201967, "o", "\b\u001b[4mt\u001b[39m\u001b[4me\u001b[24m"]
[17.414341, "i", "s"]
[17.415248, "o", "\b\u001b[4me\u001b[39m\u001b[4ms\u001b[24m"]
[17.517404, "i", "t"]
[17.518234, "o", "\b\u001b[4ms\u001b[39m\u001b[4mt\u001b[24m"]
[17.641136, "i", "."]
[17.64204, "o", "\b\u001b[4mt\u001b[39m\u001b[4m.\u001b[24m"]
[17.782468, "i", "c"]
[17.783356, "o", "\b\u001b[4m.\u001b[39m\u001b[4mc\u001b[24m"]
[18.091776, "i", "p"]
[18.092864, "o", "\b\u001b[4mc\u001b[39m\u001b[4mp\u001b[24m"]
[18.09678, "i", "o"]
[18.098325, "o", "\b\u001b[4mp\u001b[39m\u001b[4mo\u001b[24m"]
[18.101049, "o", "\u001b[14D\u001b[24ms\u001b[24mh\u001b[24me\u001b[24ml\u001b[24ml\u001b[24m_\u001b[24mt\u001b[24me\u001b[24ms\u001b[24mt\u001b[24m.\u001b[24mc\u001b[24mp\u001b[24mo"]
[18.498446, "i", ""]
[18.500649, "o", "\b \b"]
[18.503872, "o", "\u001b[13D\u001b[4ms\u001b[4mh\u001b[4me\u001b[4ml\u001b[4ml\u001b[4m_\u001b[4mt\u001b[4me\u001b[4ms\u001b[4mt\u001b[4m.\u001b[4mc\u001b[4mp\u001b[24m"]
[18.524237, "o", "\u001b[92mp\u001b[39m\b"]
[19.269919, "i", "p"]
[19.270669, "o", "\b\u001b[4mp\u001b[39m\u001b[4mp\u001b[24m"]
[19.450607, "i", "\r"]
[19.452289, "o", "\u001b[?1l\u001b>"]
[19.452451, "o", "\u001b[?2004l"]
[19.452481, "o", "\r\r\n"]
[19.45313, "o", "\u001b]2;cat shell_test.cpp\u0007\u001b]1;cat\u0007"]
[19.456146, "o", "#include <cstdio>\r\n#include <fstream>\r\n#include <gtest/gtest.h>\r\n#include <iostream>\r\n#include <limits.h>\r\n#include <pthread.h>\r\n#include <regex>\r\n#include <signal.h>\r\n#include <stack>\r\n#include <string>\r\n#include <sys/stat.h>\r\n#include <sys/wait.h>\r\n#include <unistd.h>\r\n#include <unordered_set>\r\n\r\nint input_fd[2];\r\nint fd[2];\r\nint err_fd[2];\r\nint externalScore = 0;\r\nint internalScore = 0;\r\nint historyScore = 0;\r\n\r\nclass ShellTest : public ::testing::Test {\r\nprotected:\r\n  virtual void SetUp() {\r\n    pipe(input_fd);\r\n    pipe(fd);\r\n    pipe(err_fd);\r\n\r\n    saved_stdin = dup(fileno(stdin));\r\n    dup2(input_fd[0], fileno(stdin));\r\n\r\n    saved_stdout = dup(fileno(stdout));\r\n    dup2(fd[1], fileno(stdout));\r\n\r\n    // start the shell as a child process\r\n    pid = fork();\r\n    if (pid == 0) {\r\n      saved_stderr = dup(fileno(stderr));\r\n      dup2(err_fd[1], fileno(stderr));\r\n\r\n      close(input_fd[0]);\r\n      close(fd[1]);\r\n      close(err_fd[1]);\r\n\r\n      execl(\"./shell\", \"NULL\", NULL);\r\n    } else if (pid > 0) {\r\n      close(input_fd[0]);\r\n      close(fd[1]);\r\n      close(err_fd[1]);\r\n    } else {\r\n      perror(\"fork\");\r\n      exit(1);\r\n    }\r\n  }\r\n\r\n  virtual void TearDown() {\r\n    dup2(saved_stdout, fileno(stdout));\r\n    dup2(saved_stdin, fileno(stdin));\r\n    dup2(saved_stderr, fileno(stderr));\r\n\r\n    close(input_fd[1]);\r\n    close(fd[0]);\r\n    close(err_fd[0]);\r\n    kill(pid, SIGKILL);\r\n  }\r\n  int saved_stdout;\r\n  int saved_stdin;\r\n  int saved_stderr;\r\n  pid_t pid;\r\n};\r\n\r\nint writeInput(const char *command, bool closePipe) {\r\n  ssize_t write_status = write(input_fd[1], command, strlen(command));\r\n  if (write_status == -1) {\r\n    perror(\"Error writing to the pipe\");\r\n    return -1;\r\n  }\r\n\r\n  fd_set set;\r\n  FD_ZERO(&set);\r\n  FD_SET(input_fd[1], &set);\r\n\r\n  struct timeval timeout;\r\n  timeout.tv_sec = 1;\r\n  timeout.tv_usec = 0;\r\n\r\n  int select_status = select(input_fd[1] + 1, NULL, &set, NULL, &timeout);\r\n  if (select_status == -1) {\r\n    perror(\"Error using select()\");\r\n    return -1;\r\n  } else if (select_status == 0) {\r\n    fprintf(stderr,\r\n            \"Timeout waiting for input_fd to become ready for writing\\n\");\r\n    return -1;\r\n  }\r\n\r\n  if (closePipe) {\r\n    int close_status = close(input_fd[1]);\r\n    if (close_status == -1) {\r\n      perror(\"Error closing the pipe\");\r\n      return -1;\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nstd::string getOutputInternal(int fd_internal) {\r\n  std::string output;\r\n  char buffer[1024];\r\n\r\n  fd_set set;\r\n  FD_ZERO(&set);\r\n  FD_SET(fd_internal, &set);\r\n\r\n  struct timeval timeout;\r\n  timeout.tv_sec = 1;\r\n  timeout.tv_usec = 0;\r\n\r\n  while (true) {\r\n    int select_status = select(fd_internal + 1, &set, NULL, NULL, &timeout);\r\n    if (select_status == -1) {\r\n      perror(\"Error in select\");\r\n      exit(1);\r\n    } else if (select_status == 0) {\r\n      break;\r\n    } else {\r\n      if (FD_ISSET(fd_internal, &set)) {\r\n        int n = read(fd_internal, buffer, sizeof(buffer));\r\n        if (n == -1) {\r\n          perror(\"Error reading from the pipe\");\r\n        }\r\n        output.append(buffer, n);\r\n      }\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nstd::string getOutput() { return getOutputInternal(fd[0]); }\r\nstd::string getErrOutput() { return getOutputInternal(err_fd[0]); }\r\n\r\nstd::string parsedOutput(std::string output) {\r\n  std::string firstLine;\r\n  std::getline(std::istringstream(output), firstLine);\r\n  auto start = firstLine.find(\"$\");\r\n  if (start == std::string::npos) {\r\n    std::cerr << \"Failed to find '$' in output\" << std::endl;\r\n    exit(1);\r\n  }\r\n\r\n  firstLine = firstLine.substr(start + 1);\r\n  firstLine.erase(0, firstLine.find_first_not_of(\" \"));\r\n  return firstLine;\r\n}\r\n\r\nint getExitStatus(pid_t child_pid) {\r\n  int status;\r\n  waitpid(child_pid, &status, WNOHANG);\r\n  if (WIFEXITED(status)) {\r\n    return WEXITSTATUS(status);\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\nvoid adjustScore(bool result, int val, int &scoreType) {\r\n  if (result)\r\n    scoreType += val;\r\n}\r\n\r\nTEST_F(ShellTest, TestFork) {\r\n\r\n  int writeStatus = writeInput(\"sleep 5\\n\", true);\r\n  if (writeStatus == -1)\r\n    exit(1);\r\n\r\n  getOutput();\r\n\r\n  st"]
